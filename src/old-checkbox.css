checkbox.css - Sleek, Minimal, Modern Design

/* Container structure:
    <div>
        <label>
            <input type="checkbox">
            <span>Option 1</span>
        </label>
        
        <label>
            <input type="checkbox" checked>
            <span>Option 2</span>
        </label>
        
        <label>
            <input type="checkbox" disabled>
            <span>Option 3 (Disabled)</span>
        </label>
        
        <label>
            <input type="checkbox">
            <span>Option 4</span>
        </label>
    </div>
*/

/* Checkbox group container */
div:has(> label > input[type="checkbox"]) {
  @apply flex w-full flex-wrap;
}

/* Style the label containing a checkbox input */
label:has(input[type="checkbox"]) {
  @apply relative flex cursor-pointer items-center border-gray-800 bg-white py-1 pl-6 text-gray-800 transition-colors duration-200 ease-in-out select-none dark:border-gray-500 dark:bg-black dark:text-gray-200;
  width: calc(50% - 0.75rem); /* 50% width minus half of the gap */
}

input[type="checkbox"] {
  @apply absolute h-0 w-0 opacity-0;
}

input[type="checkbox"]:disabled,
input[type="checkbox"]:disabled + label,
label:has(> input[type="checkbox"]:disabled) {
  @apply cursor-not-allowed opacity-50;
}

/* Custom checkbox (square) */
label:has(input[type="checkbox"]):before {
  /* @apply absolute border transition-colors duration-200 ease-in-out; */
  @apply absolute rounded transition-colors duration-200 ease-in-out;
  content: "";
  left: 0;
  top: 50%;
  transform: translateY(-50%);
  height: 1rem;
  width: 1rem;
  @apply depth-3;
}

/* Checkbox when checked - background */
label:has(input[type="checkbox"]:checked):before {
  @apply border-2 border-yellow-400 dark:border-yellow-400;
}

/* Checkbox when checked - checkmark */
label:has(input[type="checkbox"]:checked):after {
  content: "";
  position: absolute;
  left: 0.25rem;
  top: 50%;
  transform: translateY(-50%) rotate(-45deg);
  width: 0.5rem;
  height: 0.25rem;
  border-bottom: 2px solid;
  border-left: 2px solid;
  @apply border-yellow-400 dark:border-yellow-400;
}

/* Focus state */
label:has(input[type="checkbox"]:focus-visible):before {
  @apply outline-2 outline-offset-2 outline-yellow-400 dark:outline-yellow-400;
}

/* Hover state */
label:has(input[type="checkbox"]:not(:disabled)):hover:before {
  @apply border-yellow-400 dark:border-yellow-400;
}

/* Indeterminate state */
label:has(input[type="checkbox"]:indeterminate):before {
  @apply border-2 border-yellow-400 dark:border-yellow-400;
}

label:has(input[type="checkbox"]:indeterminate):after {
  content: "";
  position: absolute;
  left: 0.25rem;
  top: 50%;
  transform: translateY(-50%);
  width: 0.5rem;
  height: 0.125rem;
  @apply bg-yellow-400 dark:bg-yellow-400;
}

/* Responsive adjustments - Medium devices (768px and up) */
@media (min-width: 768px) {
  label:has(input[type="checkbox"]) {
    @apply w-auto flex-1 text-[0.9375rem];
    max-width: 25%; /* Ensure no more than 4 options per row */
  }

  label:has(input[type="checkbox"]):before {
    height: 1.25rem;
    width: 1.25rem;
  }

  label:has(input[type="checkbox"]:checked):after {
    width: 0.625rem;
    height: 0.3125rem;
    left: 0.3125rem;
  }

  label:has(input[type="checkbox"]:indeterminate):after {
    width: 0.625rem;
    height: 0.1875rem;
    left: 0.3125rem;
  }
}

/* Responsive adjustments - Large devices (1024px and up) */
@media (min-width: 1024px) {
  label:has(input[type="checkbox"]) {
    @apply pl-8 text-base;
  }

  label:has(input[type="checkbox"]):before {
    height: 1.375rem;
    width: 1.375rem;
  }

  label:has(input[type="checkbox"]:checked):after {
    width: 0.75rem;
    height: 0.375rem;
    left: 0.3125rem;
  }

  label:has(input[type="checkbox"]:indeterminate):after {
    width: 0.75rem;
    height: 0.1875rem;
    left: 0.3125rem;
  }
}
